# -*- coding: utf-8 -*-
"""Computational Assignment 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ocVeomHA8wXlqcOvflGuzAw7YWD43nwc
"""

#1st Question
import numpy as np
import matplotlib.pyplot as plt

def dydx(x,y):
    return -x*y

def fun(x):
    return np.exp(-x**2/2)

def euler(x,y0):
    h = x[1]-x[0]
    y0 = 1
    y = np.zeros(len(x))
    y[0] = y0
    for i in range(len(x)-1):

        y[i+1] = y[i]+h*dydx(x[i],y[i])
    return(y)
n = 100
x = np.linspace(0,10,n)

def RK2(x,y1):
    h = x[1]-x[0]
    #h = 0.1
    y0 = 1
    y1 = np.zeros(len(x))
    y1[0] = y0
    for i in range(len(x)-1):
        y_step =y1[i]+h*dydx(x[i],y1[i])
        y1[i+1] = y1[i]+0.5*h*(dydx(x[i],y1[i])+dydx(x[i+1],y_step))

    return y1

def RK4(x,y2):
    h = x[1]-x[0]
    y0 = 1
    #x = np.linspace(0,10,n)
    y2 = np.zeros(len(x))
    y2[0] = y0
    for i in range(len(x)-1):
        k1 = h*dydx(x[i],y2[i])
        k2 = h*dydx(x[i]+h*0.5,y2[i]+k1*0.5)
        k3 = h*dydx(x[i]+h*0.5,y2[i]+k2*0.5)
        k4 = h*dydx(x[i]+h,y2[i]+k3)
        k = (k1+2*k2+2*k3+k4)/6
        y2[i+1]=y2[i]+k
    return y2

#Finding the error for the Euler,RK2 and RK4 Method
n = np.linspace(1, 100, 10)*100
l1 = np.zeros(shape=len(n))
l2 = np.zeros(shape=len(n))
l1_1 = np.zeros(shape=len(n))
l2_2 = np.zeros(shape=len(n))
l1_3 = np.zeros(shape=len(n))
l2_4 = np.zeros(shape=len(n))
for i in range(len(n)):
    x_new = np.linspace(0, 10, int(n[i]))
    l1[i] = np.sum(abs(fun(x_new)-euler(x_new, 1)))/n[i]
    l2[i] = np.sqrt(np.sum(abs(fun(x_new)-euler(x_new,1))**2)/n[i])
    l1_1[i] = np.sum(abs(fun(x_new)-RK2(x_new, 1)))/n[i]
    l2_2[i] = np.sqrt(np.sum(abs(fun(x_new)-RK2(x_new,1))**2)/n[i])
    l1_3[i] = np.sum(abs(fun(x_new)-RK4(x_new, 1)))/n[i]
    l2_4[i] = np.sqrt(np.sum(abs(fun(x_new)-RK4(x_new,1))**2)/n[i])




plt.figure(figsize=(14,7),dpi=120)
plt.title('Error for the Euler,RK2,RK4 method')
plt.plot(n,l1_3,'g--',label='RK4 error l1')
plt.plot(n,l2_4,'r--',label='RK4 error l2')
plt.plot(n,l1,'k--',label='euler error l1')
plt.plot(n,l2,'m--',label='euler error l2')
plt.plot(n,l1_1,'y--',label='RK2 error l1')
plt.plot(n,l2_2,'b--',label='RK2 error l2')
plt.yscale('log')
plt.xscale('log')
plt.ylabel('Error')
plt.xlabel('n')
plt.legend()
plt.grid()
plt.show()

#2nd Question
import numpy as np
import matplotlib.pyplot as plt

a = 5.0
e = 0.8
c = 1/(a*(1-(e**2)))
#print(c)
def exact(theta,theta0):
    return (a*(1-e**2))/(1+e*np.cos(theta-theta0))

#From Euler Method
def f(v,u):             #where v = du/d(theta)
    return c-u

n = 10000
theta = np.linspace(0,10*np.pi,10000)
h = theta[1]-theta[0]/n
u = np.zeros(len(theta))
v = np.zeros(len(theta))
u[0] = 1/(a*(1-e))
v[0] = 0
for i in range(len(theta)-1):
    u[i+1] = u[i]+h*v[i]
    v[i+1] = v[i]+h*f(v[i],u[i])
#plt.polar(theta,exact(theta,0))
#from RK2 method
def f(v1,u1):
    return c-u1
n = 10000
theta = np.linspace(0,10*np.pi,10000)
h = theta[1]-theta[0]/n
u1 = np.zeros(len(theta))
v1 = np.zeros(len(theta))
#Initial condition
u1[0] = 1/(a*(1-e))
v1[0] = 0
for i in range(len(theta)-1):
    k1 = h*v1[i]
    k2 = h*(v1[i]+h)
    k11 = h*f(v1[i],u1[i])
    k22 = h*f((v1[i]+h),(u1[i]+k11))
    u1[i+1] = u1[i]+0.5*(k1+k2)
    v1[i+1] = v1[i]+0.5*(k11+k22)



plt.polar(theta,(1/u1),label='Rk2')
plt.polar(theta,(1/u),label='euler')
plt.polar(theta,exact(theta,0),'g--',label='exact')
plt.legend()
plt.show()

#3rd Question
def dMdr(r,rho):
    return r**(2)*rho

def f(rho,M,r):                     #where f = d(rho)/dr
    return -M*(rho**(2/3))/(r**(2))

n = 10000
r = np.linspace(0.000001,30,n)
h = r[1]-r[0]
rho = np.zeros(len(r))
rho[0] = 10**(6)
M = np.zeros(len(r))
M[0] = 0
t = []
for i in range(len(r)-1):
    M[i+1] = M[i]+h*dMdr(r[i],rho[i])
    rho[i+1] = rho[i]+h*f(rho[i],M[i],r[i])
    t.append(M)



plt.figure(figsize=(14,7),dpi=80)
plt.plot(r,M,'g',label='Mass variation')
plt.xlabel('radius')
plt.ylabel('Mass')
plt.legend()
plt.grid()
plt.show()
plt.figure(figsize=(14,7),dpi=80)
plt.plot(r,rho,'r',label='density variation')
plt.ylabel('density')
plt.xlabel('radius')
plt.legend()
plt.grid()
plt.show()
